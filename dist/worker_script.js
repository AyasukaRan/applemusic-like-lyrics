(()=>{var ee=Object.defineProperty;var te=(r,e,t)=>e in r?ee(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var m=(r,e,t)=>(te(r,typeof e!="symbol"?e+"":e,t),t);var S=new EventTarget;function G(r,e){let t=0;return function(){let o=this,i=arguments;t&&clearTimeout(t),t=setTimeout(r.bind(o,i),e)}}var L=47,V=46,re=r=>{let e=typeof r;if(e!=="string")throw new TypeError(`Expected a string, got a ${e}`)},ne=(r,e)=>{let t="",n=0,o=-1,i=0,l;for(let a=0;a<=r.length;++a){if(a<r.length)l=r.charCodeAt(a);else{if(l===L)break;l=L}if(l===L){if(!(o===a-1||i===1))if(o!==a-1&&i===2){if(t.length<2||n!==2||t.charCodeAt(t.length-1)!==V||t.charCodeAt(t.length-2)!==V){if(t.length>2){let s=t.lastIndexOf("/");if(s!==t.length-1){s===-1?(t="",n=0):(t=t.slice(0,s),n=t.length-1-t.lastIndexOf("/")),o=a,i=0;continue}}else if(t.length===2||t.length===1){t="",n=0,o=a,i=0;continue}}e&&(t.length>0?t+="/..":t="..",n=2)}else t.length>0?t+=`/${r.slice(o+1,a)}`:t=r.slice(o+1,a),n=a-o-1;o=a,i=0}else l===V&&i!==-1?++i:i=-1}return t},oe=r=>{try{return decodeURIComponent(r)}catch(e){return r}},W=r=>{re(r);let e=r.replaceAll("\\","/");if(e.length===0)return".";let t=e.charCodeAt(0)===L,n=e.charCodeAt(e.length-1)===L;return e=oe(e),e=ne(e,!t),e.length===0&&!t&&(e="."),e.length>0&&n&&(e+="/"),t?`/${e}`:e};function $(r){let e="0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz",t=[];for(let n=0;n<r;n++)t.push(e.charAt(Math.floor(Math.random()*e.length)));return t.join("")}var f=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope;var b=f?(...r)=>console.log("[AMLL-Worker]",...r):console.log,I=f?(...r)=>console.warn("[AMLL-Worker]",...r):console.warn,j=f?(...r)=>console.error("[AMLL-Worker]",...r):console.error;var P={},D=()=>W(`${plugin.mainPlugin.pluginPath}/../../amll-data`),se=()=>W(`${D()}/amll-settings.json`);f||window.addEventListener("unload",K);async function K(){if(f){S.dispatchEvent(new Event("config-saved"));return}try{await betterncm.fs.exists(D())||await betterncm.fs.mkdir(D()),await betterncm.fs.writeFile(se(),JSON.stringify(P)),b("AMLL 插件配置保存成功")}catch(r){I("警告：AMLL 插件配置保存失败",r)}S.dispatchEvent(new Event("config-saved"))}var ie=G(K,500);function U(r,e){f||q({[r]:e}),e===void 0?delete P[r]:P[r]=e,ie()}var v=class extends Array{constructor(t=(n,o)=>Number(n)-Number(o)){super();this._comparator=t;m(this,"_sorted",!1);m(this,"sort",t=>(this._comparator=t||this._comparator,this._sorted=!0,super.sort(this._comparator)));m(this,"push",t=>(this._sorted=!1,super.push(t)));m(this,"pop",()=>(this._sorted||this.sort(),super.pop()));m(this,"peek",t=>(this._sorted||this.sort(),t===void 0&&(t=this.length-1),this[t]));m(this,"size",()=>this.length);m(this,"debug",()=>(this._sorted||this.sort(),this))}};var w=class{constructor(e,t,n,o,i,l,a){this.r1=e;this.r2=t;this.g1=n;this.g2=o;this.b1=i;this.b2=l;this.histo=a;m(this,"_count",-1);m(this,"_volume",0);m(this,"_avg",[0,0,0]);m(this,"volume",e=>this._volume&&!e?this._volume:(this._volume=(this.r2-this.r1+1)*(this.g2-this.g1+1)*(this.b2-this.b1+1),this._volume));m(this,"count",e=>{if(this._count>-1&&!e)return this._count;let t=0,n,o,i,l;for(n=this.r1;n<=this.r2;n++)for(o=this.g1;o<=this.g2;o++)for(i=this.b1;i<=this.b2;i++)l=x(n,o,i),t+=this.histo[l]||0;return this._count=t,this._count});m(this,"copy",()=>new w(this.r1,this.r2,this.g1,this.g2,this.b1,this.b2,this.histo));m(this,"avg",e=>{if(this._avg.length&&e)return this._avg;let t=0,n=1<<T,o=0,i=0,l=0,a,s,u,c,g;for(s=this.r1;s<=this.r2;s++)for(u=this.g1;u<=this.g2;u++)for(c=this.b1;c<=this.b2;c++)g=x(s,u,c),a=this.histo[g]||0,t+=a,o+=a*(s+.5)*n,i+=a*(u+.5)*n,l+=a*(c+.5)*n;return t?this._avg=[~~(o/t),~~(i/t),~~(l/t)]:this._avg=[~~(n*(this.r1+this.r2+1)/2),~~(n*(this.g1+this.g2+1)/2),~~(n*(this.b1+this.b2+1)/2)],this._avg});m(this,"contains",e=>{let[t,n,o]=e.map(i=>i>>T);return t>=this.r1&&t<=this.r2&&n>=this.g1&&n<=this.g2&&o>=this.b1&&o<=this.b2})}};var A=5,T=8-A,F=1e3,J=.75,d={naturalOrder:(r,e)=>r<e?-1:r>e?1:0,sum:(r,e)=>r.reduce((t,n)=>t+(e?e.call(r,n):Number(n)),0),max:(r,e)=>Math.max.apply(null,e?r.map(e):r.map(t=>Number(t))),size:r=>r.reduce((e,t)=>t?e+1:e,0)},x=(r,e,t)=>(r<<2*A)+(e<<A)+t;var Z=r=>{let e=new Array(1<<3*A),t,n=1/0,o=0,i=1/0,l=0,a=1/0,s=0,u,c,g;return r.forEach(function(p){[u,c,g]=p.map(h=>h>>T),t=x(u,c,g),e[t]=(e[t]||0)+1,u<n?n=u:u>o&&(o=u),c<i?i=c:c>l&&(l=c),g<a?a=g:g>s&&(s=g)}),{vbox:new w(n,o,i,l,a,s,e),histo:e}},Q=(r,e)=>{if(!e.count())return[];if(e.count()===1)return[e.copy()];let t=e.r2-e.r1+1,n=e.g2-e.g1+1,o=e.b2-e.b1+1,i=d.max([t,n,o]),l=[],a=0,s,u,c,g,p;if(i===t)for(s=e.r1;s<=e.r2;s++){for(g=0,u=e.g1;u<=e.g2;u++)for(c=e.b1;c<=e.b2;c++)p=x(s,u,c),g+=r[p]||0;a+=g,l[s]=a}else if(i===n)for(s=e.g1;s<=e.g2;s++){for(g=0,u=e.r1;u<=e.r2;u++)for(c=e.b1;c<=e.b2;c++)p=x(u,s,c),g+=r[p]||0;a+=g,l[s]=a}else for(s=e.b1;s<=e.b2;s++){for(g=0,u=e.r1;u<=e.r2;u++)for(c=e.g1;c<=e.g2;c++)p=x(u,c,s),g+=r[p]||0;a+=g,l[s]=a}let h=H=>{let O=`${H}1`,M=`${H}2`,k,_,B,E,C;for(s=e[O];s<=e[M]&&!(l[s]>=a/2);s++);for(B=e.copy(),E=e.copy(),k=s-e[O],_=e[M]-s,C=k<=_?Math.min(e[M]-1,~~(s+_/2)):Math.max(e[O],~~(s-1-k/2));!l[C]&&C<=e[M];)C++;return B[M]=C,E[O]=C+1,[B,E]};return h(i===t?"r":i===n?"g":"b")};var R=class{constructor(){m(this,"vboxes");m(this,"push",e=>{this.vboxes.push({vbox:e,color:e.avg()})});m(this,"palette",()=>this.vboxes.map(e=>e.color));m(this,"size",()=>this.vboxes.size());m(this,"map",e=>{for(let t=0;t<this.vboxes.size();t++)if(this.vboxes.peek(t).vbox.contains(e))return this.vboxes.peek(t).color;return this.nearest(e)});m(this,"nearest",e=>{let t,n,o,i;for(t=0;t<this.vboxes.size();t++)o=Math.sqrt(Math.pow(e[0]-this.vboxes.peek(t).color[0],2)+Math.pow(e[1]-this.vboxes.peek(t).color[1],2)+Math.pow(e[2]-this.vboxes.peek(t).color[2],2)),(n===void 0||o<n)&&(n=o,i=this.vboxes.peek(t).color);return i});m(this,"forcebw",()=>{this.vboxes.sort((o,i)=>d.naturalOrder(d.sum(o.color),d.sum(i.color)));let e=this.vboxes[0].color;e[0]<5&&e[1]<5&&e[2]<5&&(this.vboxes[0].color=[0,0,0]);let t=this.vboxes.length-1,n=this.vboxes[t].color;n[0]>251&&n[1]>251&&n[2]>251&&(this.vboxes[t].color=[255,255,255]),this.vboxes.sort(R._compare)});this.vboxes=new v(R._compare)}},y=R;m(y,"_compare",(e,t)=>d.naturalOrder(e.vbox.count()*e.vbox.volume(),t.vbox.count()*t.vbox.volume()));var X=(r,e)=>{if(!r.length||e<1||e>256)return new y;let{histo:t,vbox:n}=Z(r),o=new v((a,s)=>d.naturalOrder(a.count(),s.count()));o.push(n);let i=(a,s)=>{let u=a.size(),c=0,g;for(;c<F;){if(u>=s||c++>F||!a.peek().count())return;g=a.pop();let[p,h]=Q(t,g);if(!p)return;a.push(p),h&&(a.push(h),u++)}};i(o,J*e),o.sort((a,s)=>d.naturalOrder(a.count()*a.volume(),s.count()*s.volume())),i(o,e);let l=new y;for(;o.size();)l.push(o.pop());return l};var Y;var N={},ae=new Map;function z(r,e,t=[]){N[r]={funcName:r,funcBody:e};let n=0;return(...o)=>{if(Y)return new Promise((i,l)=>{let a=`${$(4)} - ${r} - ${n++}`;ae.set(a,[i,l]),Y.postMessage({id:a,funcName:r,args:o},t.map(s=>o[s]).filter(s=>!!s))});APP_CONF.isOSX||I("AMLL Worker 尚未运行，正在本地线程执行函数",r,o);try{let i=e(...o);return Promise.resolve(i)}catch(i){return Promise.reject(i)}}}var je=z("grabImageColors",(r,e=16)=>{let t,n;if(f||!APP_CONF.isOSX?(t=new OffscreenCanvas(r.width,r.height),n=t.getContext("2d")):(t=document.createElement("canvas"),t.width=r.width,t.height=r.height,n=t.getContext("2d")),n){n.drawImage(r,0,0);let o=n.getImageData(0,0,t.width,t.height),i=[];for(let s=0;s<o.width*o.height;s++)i.push([o.data[s*4],o.data[s*4+1],o.data[s*4+2]]);let l=X(i,e),a=[];return l.palette().forEach(s=>a.push(s)),a}else return[]}),Ke=z("calcImageAverageColor",r=>{let e,t;if(f||!APP_CONF.isOSX?(e=new OffscreenCanvas(r.width,r.height),t=e.getContext("2d")):(e=document.createElement("canvas"),e.width=r.width,e.height=r.height,t=e.getContext("2d")),t){t.drawImage(r,0,0);let n=t.getImageData(0,0,e.width,e.height),o=[0,0,0];for(let i=0;i<n.width*n.height;i++)o[0]+=n.data[i*4],o[1]+=n.data[i*4+1],o[2]+=n.data[i*4+2];return o}else return[0,0,0]}),q=z("setConfigFromMain",r=>{if(f){for(let e in r)U(e,r[e]);b("已从主线程同步配置",...Object.keys(r))}});onmessage=async r=>{try{b("正在执行后台任务",r.data.id,r.data.funcName,r.data.args);let t=await N[r.data.funcName].funcBody(...r.data.args);postMessage({id:r.data.id,result:t})}catch(e){j("后台任务发生错误",r.data.id,r.data.funcName,r.data.args,e),postMessage({id:r.data.id,result:void 0,error:e})}};b("AMLL 后台线程正在运行！");})();
//# sourceMappingURL=data:application/json;base64,
