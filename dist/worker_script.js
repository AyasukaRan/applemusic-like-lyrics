(()=>{var Z=Object.defineProperty;var Q=(r,e,t)=>e in r?Z(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var c=(r,e,t)=>(Q(r,typeof e!="symbol"?e+"":e,t),t);var E=new EventTarget;function D(r,e){let t=0;return function(){let s=this,i=arguments;t&&clearTimeout(t),t=setTimeout(r.bind(s,i),e)}}function F(r){let e="0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz",t=[];for(let o=0;o<r;o++)t.push(e.charAt(Math.floor(Math.random()*e.length)));return t.join("")}var p=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope;var M=p?(...r)=>console.log("[AMLL-Worker]",...r):console.log,I=p?(...r)=>console.warn("[AMLL-Worker]",...r):console.warn,N=p?(...r)=>console.error("[AMLL-Worker]",...r):console.error;var L={};p||window.addEventListener("unload",z);async function z(){if(p){E.dispatchEvent(new Event("config-saved"));return}try{await betterncm.fs.writeFile(`${plugin.mainPlugin.pluginPath}/amll-settings.json`,JSON.stringify(L))}catch(r){I("警告：AMLL 插件配置保存失败",r)}E.dispatchEvent(new Event("config-saved"))}var X=D(z,250);function H(r,e){p||G({[r]:e}),e===void 0?delete L[r]:L[r]=e,X()}var C=class extends Array{constructor(t=(o,s)=>Number(o)-Number(s)){super();this._comparator=t;c(this,"_sorted",!1);c(this,"sort",t=>(this._comparator=t||this._comparator,this._sorted=!0,super.sort(this._comparator)));c(this,"push",t=>(this._sorted=!1,super.push(t)));c(this,"pop",()=>(this._sorted||this.sort(),super.pop()));c(this,"peek",t=>(this._sorted||this.sort(),t===void 0&&(t=this.length-1),this[t]));c(this,"size",()=>this.length);c(this,"debug",()=>(this._sorted||this.sort(),this))}};var v=class{constructor(e,t,o,s,i,m,a){this.r1=e;this.r2=t;this.g1=o;this.g2=s;this.b1=i;this.b2=m;this.histo=a;c(this,"_count",-1);c(this,"_volume",0);c(this,"_avg",[]);c(this,"volume",e=>this._volume&&!e?this._volume:(this._volume=(this.r2-this.r1+1)*(this.g2-this.g1+1)*(this.b2-this.b1+1),this._volume));c(this,"count",e=>{if(this._count>-1&&!e)return this._count;let t=0,o,s,i,m;for(o=this.r1;o<=this.r2;o++)for(s=this.g1;s<=this.g2;s++)for(i=this.b1;i<=this.b2;i++)m=b(o,s,i),t+=this.histo[m]||0;return this._count=t,this._count});c(this,"copy",()=>new v(this.r1,this.r2,this.g1,this.g2,this.b1,this.b2,this.histo));c(this,"avg",e=>{if(this._avg.length&&e)return this._avg;let t=0,o=1<<T,s=0,i=0,m=0,a,n,l,u,g;for(n=this.r1;n<=this.r2;n++)for(l=this.g1;l<=this.g2;l++)for(u=this.b1;u<=this.b2;u++)g=b(n,l,u),a=this.histo[g]||0,t+=a,s+=a*(n+.5)*o,i+=a*(l+.5)*o,m+=a*(u+.5)*o;return t?this._avg=[~~(s/t),~~(i/t),~~(m/t)]:this._avg=[~~(o*(this.r1+this.r2+1)/2),~~(o*(this.g1+this.g2+1)/2),~~(o*(this.b1+this.b2+1)/2)],this._avg});c(this,"contains",e=>{let[t,o,s]=e.map(i=>i>>T);return t>=this.r1&&t<=this.r2&&o>=this.g1&&o<=this.g2&&s>=this.b1&&s<=this.b2})}};var A=5,T=8-A,V=1e3,$=.75,h={naturalOrder:(r,e)=>r<e?-1:r>e?1:0,sum:(r,e)=>r.reduce((t,o)=>t+(e?e.call(r,o):Number(o)),0),max:(r,e)=>Math.max.apply(null,e?r.map(e):r.map(t=>Number(t))),size:r=>r.reduce((e,t)=>t?e+1:e,0)},b=(r,e,t)=>(r<<2*A)+(e<<A)+t;var j=r=>{let e=new Array(1<<3*A),t,o=1/0,s=0,i=1/0,m=0,a=1/0,n=0,l,u,g;return r.forEach(function(f){[l,u,g]=f.map(d=>d>>T),t=b(l,u,g),e[t]=(e[t]||0)+1,l<o?o=l:l>s&&(s=l),u<i?i=u:u>m&&(m=u),g<a?a=g:g>n&&(n=g)}),{vbox:new v(o,s,i,m,a,n,e),histo:e}},K=(r,e)=>{if(!e.count())return[];if(e.count()===1)return[e.copy()];let t=e.r2-e.r1+1,o=e.g2-e.g1+1,s=e.b2-e.b1+1,i=h.max([t,o,s]),m=[],a=0,n,l,u,g,f;if(i===t)for(n=e.r1;n<=e.r2;n++){for(g=0,l=e.g1;l<=e.g2;l++)for(u=e.b1;u<=e.b2;u++)f=b(n,l,u),g+=r[f]||0;a+=g,m[n]=a}else if(i===o)for(n=e.g1;n<=e.g2;n++){for(g=0,l=e.r1;l<=e.r2;l++)for(u=e.b1;u<=e.b2;u++)f=b(l,n,u),g+=r[f]||0;a+=g,m[n]=a}else for(n=e.b1;n<=e.b2;n++){for(g=0,l=e.r1;l<=e.r2;l++)for(u=e.g1;u<=e.g2;u++)f=b(l,u,n),g+=r[f]||0;a+=g,m[n]=a}let d=S=>{let k=`${S}1`,y=`${S}2`,P,_,B,R,x;for(n=e[k];n<=e[y]&&!(m[n]>=a/2);n++);for(B=e.copy(),R=e.copy(),P=n-e[k],_=e[y]-n,x=P<=_?Math.min(e[y]-1,~~(n+_/2)):Math.max(e[k],~~(n-1-P/2));!m[x]&&x<=e[y];)x++;return B[y]=x,R[k]=x+1,[B,R]};return d(i===t?"r":i===o?"g":"b")};var O=class{constructor(){c(this,"vboxes");c(this,"push",e=>{this.vboxes.push({vbox:e,color:e.avg()})});c(this,"palette",()=>this.vboxes.map(e=>e.color));c(this,"size",()=>this.vboxes.size());c(this,"map",e=>{for(let t=0;t<this.vboxes.size();t++)if(this.vboxes.peek(t).vbox.contains(e))return this.vboxes.peek(t).color;return this.nearest(e)});c(this,"nearest",e=>{let t,o,s,i;for(t=0;t<this.vboxes.size();t++)s=Math.sqrt(Math.pow(e[0]-this.vboxes.peek(t).color[0],2)+Math.pow(e[1]-this.vboxes.peek(t).color[1],2)+Math.pow(e[2]-this.vboxes.peek(t).color[2],2)),(o===void 0||s<o)&&(o=s,i=this.vboxes.peek(t).color);return i});c(this,"forcebw",()=>{this.vboxes.sort((s,i)=>h.naturalOrder(h.sum(s.color),h.sum(i.color)));let e=this.vboxes[0].color;e[0]<5&&e[1]<5&&e[2]<5&&(this.vboxes[0].color=[0,0,0]);let t=this.vboxes.length-1,o=this.vboxes[t].color;o[0]>251&&o[1]>251&&o[2]>251&&(this.vboxes[t].color=[255,255,255]),this.vboxes.sort(O._compare)});this.vboxes=new C(O._compare)}},w=O;c(w,"_compare",(e,t)=>h.naturalOrder(e.vbox.count()*e.vbox.volume(),t.vbox.count()*t.vbox.volume()));var U=(r,e)=>{if(!r.length||e<1||e>256)return new w;let{histo:t,vbox:o}=j(r),s=new C((a,n)=>h.naturalOrder(a.count(),n.count()));s.push(o);let i=(a,n)=>{let l=a.size(),u=0,g;for(;u<V;){if(l>=n||u++>V||!a.peek().count())return;g=a.pop();let[f,d]=K(t,g);if(!f)return;a.push(f),d&&(a.push(d),l++)}};i(s,$*e),s.sort((a,n)=>h.naturalOrder(a.count()*a.volume(),n.count()*n.volume())),i(s,e);let m=new w;for(;s.size();)m.push(s.pop());return m};var q;var W={},Y=new Map;function J(r,e,t=[]){W[r]={funcName:r,funcBody:e};let o=0;return(...s)=>{if(q)return new Promise((i,m)=>{let a=`${F(4)} - ${r} - ${o++}`;Y.set(a,[i,m]),q.postMessage({id:a,funcName:r,args:s},t.map(n=>s[n]).filter(n=>!!n))});APP_CONF.isOSX||I("AMLL Worker 尚未运行，正在本地线程执行函数",r,s);try{let i=e(...s);return Promise.resolve(i)}catch(i){return Promise.reject(i)}}}var Se=J("grabImageColors",(r,e=16)=>{let t,o;if(p||!APP_CONF.isOSX?(t=new OffscreenCanvas(r.width,r.height),o=t.getContext("2d")):(t=document.createElement("canvas"),t.width=r.width,t.height=r.height,o=t.getContext("2d")),o){o.drawImage(r,0,0);let s=o.getImageData(0,0,t.width,t.height),i=[];for(let n=0;n<s.width*s.height;n++)i.push([s.data[n*4],s.data[n*4+1],s.data[n*4+2]]);let m=U(i,e),a=[];return m.palette().forEach(n=>a.push(n)),a}else return[]}),G=J("setConfigFromMain",r=>{if(p){for(let e in r)H(e,r[e]);M("已从主线程同步配置",...Object.keys(r))}});onmessage=async r=>{try{M("正在执行后台任务",r.data.id,r.data.funcName,r.data.args);let t=await W[r.data.funcName].funcBody(...r.data.args);postMessage({id:r.data.id,result:t})}catch(e){N("后台任务发生错误",r.data.id,r.data.funcName,r.data.args,e),postMessage({id:r.data.id,result:void 0,error:e})}};M("AMLL 后台线程正在运行！");})();
//# sourceMappingURL=data:application/json;base64,
