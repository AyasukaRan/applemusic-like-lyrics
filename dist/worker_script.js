(()=>{var Se=Object.create;var j=Object.defineProperty;var ye=Object.getOwnPropertyDescriptor;var De=Object.getOwnPropertyNames;var Fe=Object.getPrototypeOf,Ge=Object.prototype.hasOwnProperty;var _e=(r,e,t)=>e in r?j(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var b=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports);var ke=(r,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of De(e))!Ge.call(r,s)&&s!==t&&j(r,s,{get:()=>e[s],enumerable:!(n=ye(e,s))||n.enumerable});return r};var Be=(r,e,t)=>(t=r!=null?Se(Fe(r)):{},ke(e||!r||!r.__esModule?j(t,"default",{value:r,enumerable:!0}):t,r));var m=(r,e,t)=>(_e(r,typeof e!="symbol"?e+"":e,t),t);var H=b((ht,re)=>{var Ue=typeof process=="object"&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?(...r)=>console.error("SEMVER",...r):()=>{};re.exports=Ue});var z=b((Et,ne)=>{var Xe="2.0.0",Ve=Number.MAX_SAFE_INTEGER||9007199254740991,je=16,We=["major","premajor","minor","preminor","patch","prepatch","prerelease"];ne.exports={MAX_LENGTH:256,MAX_SAFE_COMPONENT_LENGTH:je,MAX_SAFE_INTEGER:Ve,RELEASE_TYPES:We,SEMVER_SPEC_VERSION:Xe,FLAG_INCLUDE_PRERELEASE:1,FLAG_LOOSE:2}});var oe=b((O,se)=>{var{MAX_SAFE_COMPONENT_LENGTH:q}=z(),He=H();O=se.exports={};var ze=O.re=[],i=O.src=[],a=O.t={},qe=0,u=(r,e,t)=>{let n=qe++;He(r,n,e),a[r]=n,i[n]=e,ze[n]=new RegExp(e,t?"g":void 0)};u("NUMERICIDENTIFIER","0|[1-9]\\d*");u("NUMERICIDENTIFIERLOOSE","[0-9]+");u("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*");u("MAINVERSION",`(${i[a.NUMERICIDENTIFIER]})\\.(${i[a.NUMERICIDENTIFIER]})\\.(${i[a.NUMERICIDENTIFIER]})`);u("MAINVERSIONLOOSE",`(${i[a.NUMERICIDENTIFIERLOOSE]})\\.(${i[a.NUMERICIDENTIFIERLOOSE]})\\.(${i[a.NUMERICIDENTIFIERLOOSE]})`);u("PRERELEASEIDENTIFIER",`(?:${i[a.NUMERICIDENTIFIER]}|${i[a.NONNUMERICIDENTIFIER]})`);u("PRERELEASEIDENTIFIERLOOSE",`(?:${i[a.NUMERICIDENTIFIERLOOSE]}|${i[a.NONNUMERICIDENTIFIER]})`);u("PRERELEASE",`(?:-(${i[a.PRERELEASEIDENTIFIER]}(?:\\.${i[a.PRERELEASEIDENTIFIER]})*))`);u("PRERELEASELOOSE",`(?:-?(${i[a.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${i[a.PRERELEASEIDENTIFIERLOOSE]})*))`);u("BUILDIDENTIFIER","[0-9A-Za-z-]+");u("BUILD",`(?:\\+(${i[a.BUILDIDENTIFIER]}(?:\\.${i[a.BUILDIDENTIFIER]})*))`);u("FULLPLAIN",`v?${i[a.MAINVERSION]}${i[a.PRERELEASE]}?${i[a.BUILD]}?`);u("FULL",`^${i[a.FULLPLAIN]}$`);u("LOOSEPLAIN",`[v=\\s]*${i[a.MAINVERSIONLOOSE]}${i[a.PRERELEASELOOSE]}?${i[a.BUILD]}?`);u("LOOSE",`^${i[a.LOOSEPLAIN]}$`);u("GTLT","((?:<|>)?=?)");u("XRANGEIDENTIFIERLOOSE",`${i[a.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);u("XRANGEIDENTIFIER",`${i[a.NUMERICIDENTIFIER]}|x|X|\\*`);u("XRANGEPLAIN",`[v=\\s]*(${i[a.XRANGEIDENTIFIER]})(?:\\.(${i[a.XRANGEIDENTIFIER]})(?:\\.(${i[a.XRANGEIDENTIFIER]})(?:${i[a.PRERELEASE]})?${i[a.BUILD]}?)?)?`);u("XRANGEPLAINLOOSE",`[v=\\s]*(${i[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${i[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${i[a.XRANGEIDENTIFIERLOOSE]})(?:${i[a.PRERELEASELOOSE]})?${i[a.BUILD]}?)?)?`);u("XRANGE",`^${i[a.GTLT]}\\s*${i[a.XRANGEPLAIN]}$`);u("XRANGELOOSE",`^${i[a.GTLT]}\\s*${i[a.XRANGEPLAINLOOSE]}$`);u("COERCE",`(^|[^\\d])(\\d{1,${q}})(?:\\.(\\d{1,${q}}))?(?:\\.(\\d{1,${q}}))?(?:$|[^\\d])`);u("COERCERTL",i[a.COERCE],!0);u("LONETILDE","(?:~>?)");u("TILDETRIM",`(\\s*)${i[a.LONETILDE]}\\s+`,!0);O.tildeTrimReplace="$1~";u("TILDE",`^${i[a.LONETILDE]}${i[a.XRANGEPLAIN]}$`);u("TILDELOOSE",`^${i[a.LONETILDE]}${i[a.XRANGEPLAINLOOSE]}$`);u("LONECARET","(?:\\^)");u("CARETTRIM",`(\\s*)${i[a.LONECARET]}\\s+`,!0);O.caretTrimReplace="$1^";u("CARET",`^${i[a.LONECARET]}${i[a.XRANGEPLAIN]}$`);u("CARETLOOSE",`^${i[a.LONECARET]}${i[a.XRANGEPLAINLOOSE]}$`);u("COMPARATORLOOSE",`^${i[a.GTLT]}\\s*(${i[a.LOOSEPLAIN]})$|^$`);u("COMPARATOR",`^${i[a.GTLT]}\\s*(${i[a.FULLPLAIN]})$|^$`);u("COMPARATORTRIM",`(\\s*)${i[a.GTLT]}\\s*(${i[a.LOOSEPLAIN]}|${i[a.XRANGEPLAIN]})`,!0);O.comparatorTrimReplace="$1$2$3";u("HYPHENRANGE",`^\\s*(${i[a.XRANGEPLAIN]})\\s+-\\s+(${i[a.XRANGEPLAIN]})\\s*$`);u("HYPHENRANGELOOSE",`^\\s*(${i[a.XRANGEPLAINLOOSE]})\\s+-\\s+(${i[a.XRANGEPLAINLOOSE]})\\s*$`);u("STAR","(<|>)?=?\\s*\\*");u("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$");u("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$")});var ae=b((mt,ie)=>{var Ke=Object.freeze({loose:!0}),Ze=Object.freeze({}),Je=r=>r?typeof r!="object"?Ke:r:Ze;ie.exports=Je});var pe=b((ft,ue)=>{var le=/^[0-9]+$/,ce=(r,e)=>{let t=le.test(r),n=le.test(e);return t&&n&&(r=+r,e=+e),r===e?0:t&&!n?-1:n&&!t?1:r<e?-1:1},Qe=(r,e)=>ce(e,r);ue.exports={compareIdentifiers:ce,rcompareIdentifiers:Qe}});var ge=b((gt,fe)=>{var S=H(),{MAX_LENGTH:he,MAX_SAFE_INTEGER:y}=z(),{re:Ee,t:me}=oe(),Ye=ae(),{compareIdentifiers:T}=pe(),g=class{constructor(e,t){if(t=Ye(t),e instanceof g){if(e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease)return e;e=e.version}else if(typeof e!="string")throw new TypeError(`Invalid version. Must be a string. Got type "${typeof e}".`);if(e.length>he)throw new TypeError(`version is longer than ${he} characters`);S("SemVer",e,t),this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease;let n=e.trim().match(t.loose?Ee[me.LOOSE]:Ee[me.FULL]);if(!n)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+n[1],this.minor=+n[2],this.patch=+n[3],this.major>y||this.major<0)throw new TypeError("Invalid major version");if(this.minor>y||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>y||this.patch<0)throw new TypeError("Invalid patch version");n[4]?this.prerelease=n[4].split(".").map(s=>{if(/^[0-9]+$/.test(s)){let o=+s;if(o>=0&&o<y)return o}return s}):this.prerelease=[],this.build=n[5]?n[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(S("SemVer.compare",this.version,this.options,e),!(e instanceof g)){if(typeof e=="string"&&e===this.version)return 0;e=new g(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof g||(e=new g(e,this.options)),T(this.major,e.major)||T(this.minor,e.minor)||T(this.patch,e.patch)}comparePre(e){if(e instanceof g||(e=new g(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let t=0;do{let n=this.prerelease[t],s=e.prerelease[t];if(S("prerelease compare",t,n,s),n===void 0&&s===void 0)return 0;if(s===void 0)return 1;if(n===void 0)return-1;if(n===s)continue;return T(n,s)}while(++t)}compareBuild(e){e instanceof g||(e=new g(e,this.options));let t=0;do{let n=this.build[t],s=e.build[t];if(S("prerelease compare",t,n,s),n===void 0&&s===void 0)return 0;if(s===void 0)return 1;if(n===void 0)return-1;if(n===s)continue;return T(n,s)}while(++t)}inc(e,t,n){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t,n);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t,n);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t,n),this.inc("pre",t,n);break;case"prerelease":this.prerelease.length===0&&this.inc("patch",t,n),this.inc("pre",t,n);break;case"major":(this.minor!==0||this.patch!==0||this.prerelease.length===0)&&this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":(this.patch!==0||this.prerelease.length===0)&&this.minor++,this.patch=0,this.prerelease=[];break;case"patch":this.prerelease.length===0&&this.patch++,this.prerelease=[];break;case"pre":{let s=Number(n)?1:0;if(!t&&n===!1)throw new Error("invalid increment argument: identifier is empty");if(this.prerelease.length===0)this.prerelease=[s];else{let o=this.prerelease.length;for(;--o>=0;)typeof this.prerelease[o]=="number"&&(this.prerelease[o]++,o=-2);if(o===-1){if(t===this.prerelease.join(".")&&n===!1)throw new Error("invalid increment argument: identifier already exists");this.prerelease.push(s)}}if(t){let o=[t,s];n===!1&&(o=[t]),T(this.prerelease[0],t)===0?isNaN(this.prerelease[1])&&(this.prerelease=o):this.prerelease=o}break}default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}};fe.exports=g});var Re=b((dt,Ie)=>{var de=ge(),et=(r,e,t)=>new de(r,t).compare(new de(e,t));Ie.exports=et});var be=b((It,Le)=>{var tt=Re(),rt=(r,e,t)=>tt(r,e,t)<0;Le.exports=rt});var W=new EventTarget;var nt=Be(be());function Oe(r,e){let t=0;return function(){let s=this,o=arguments;t&&clearTimeout(t),t=setTimeout(r.bind(s,o),e)}}var v=47,K=46,st=r=>{let e=typeof r;if(e!=="string")throw new TypeError(`Expected a string, got a ${e}`)},ot=(r,e)=>{let t="",n=0,s=-1,o=0,p;for(let c=0;c<=r.length;++c){if(c<r.length)p=r.charCodeAt(c);else{if(p===v)break;p=v}if(p===v){if(!(s===c-1||o===1))if(s!==c-1&&o===2){if(t.length<2||n!==2||t.charCodeAt(t.length-1)!==K||t.charCodeAt(t.length-2)!==K){if(t.length>2){let l=t.lastIndexOf("/");if(l!==t.length-1){l===-1?(t="",n=0):(t=t.slice(0,l),n=t.length-1-t.lastIndexOf("/")),s=c,o=0;continue}}else if(t.length===2||t.length===1){t="",n=0,s=c,o=0;continue}}e&&(t.length>0?t+="/..":t="..",n=2)}else t.length>0?t+=`/${r.slice(s+1,c)}`:t=r.slice(s+1,c),n=c-s-1;s=c,o=0}else p===K&&o!==-1?++o:o=-1}return t},it=r=>{try{return decodeURIComponent(r)}catch(e){return r}},Z=r=>{st(r);let e=r.replaceAll("\\","/");if(e.length===0)return".";let t=e.charCodeAt(0)===v,n=e.charCodeAt(e.length-1)===v;return e=it(e),e=ot(e,!t),e.length===0&&!t&&(e="."),e.length>0&&n&&(e+="/"),t?`/${e}`:e};function Ne(r){let e="0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz",t=[];for(let n=0;n<r;n++)t.push(e.charAt(Math.floor(Math.random()*e.length)));return t.join("")}var d=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope;var N=d?(...r)=>console.log("[AMLL-Worker]",...r):console.log,D=d?(...r)=>console.warn("[AMLL-Worker]",...r):console.warn,xe=d?(...r)=>console.error("[AMLL-Worker]",...r):console.error;var F={},J=()=>Z(`${plugin.mainPlugin.pluginPath}/../../amll-data`),at=()=>Z(`${J()}/amll-settings.json`);d||window.addEventListener("unload",Ae);async function Ae(){if(d){W.dispatchEvent(new Event("config-saved"));return}try{await betterncm.fs.exists(J())||await betterncm.fs.mkdir(J()),await betterncm.fs.writeFile(at(),JSON.stringify(F)),N("AMLL 插件配置保存成功")}catch(r){D("警告：AMLL 插件配置保存失败",r)}W.dispatchEvent(new Event("config-saved"))}var lt=Oe(Ae,500);function Te(r,e){d||Ce({[r]:e}),e===void 0?delete F[r]:F[r]=e,lt()}var C=class extends Array{constructor(t=(n,s)=>Number(n)-Number(s)){super();this._comparator=t;m(this,"_sorted",!1);m(this,"sort",t=>(this._comparator=t||this._comparator,this._sorted=!0,super.sort(this._comparator)));m(this,"push",t=>(this._sorted=!1,super.push(t)));m(this,"pop",()=>(this._sorted||this.sort(),super.pop()));m(this,"peek",t=>(this._sorted||this.sort(),t===void 0&&(t=this.length-1),this[t]));m(this,"size",()=>this.length);m(this,"debug",()=>(this._sorted||this.sort(),this))}};var $=class{constructor(e,t,n,s,o,p,c){this.r1=e;this.r2=t;this.g1=n;this.g2=s;this.b1=o;this.b2=p;this.histo=c;m(this,"_count",-1);m(this,"_volume",0);m(this,"_avg",[0,0,0]);m(this,"volume",e=>this._volume&&!e?this._volume:(this._volume=(this.r2-this.r1+1)*(this.g2-this.g1+1)*(this.b2-this.b1+1),this._volume));m(this,"count",e=>{if(this._count>-1&&!e)return this._count;let t=0,n,s,o,p;for(n=this.r1;n<=this.r2;n++)for(s=this.g1;s<=this.g2;s++)for(o=this.b1;o<=this.b2;o++)p=x(n,s,o),t+=this.histo[p]||0;return this._count=t,this._count});m(this,"copy",()=>new $(this.r1,this.r2,this.g1,this.g2,this.b1,this.b2,this.histo));m(this,"avg",e=>{if(this._avg.length&&e)return this._avg;let t=0,n=1<<G,s=0,o=0,p=0,c,l,h,E,f;for(l=this.r1;l<=this.r2;l++)for(h=this.g1;h<=this.g2;h++)for(E=this.b1;E<=this.b2;E++)f=x(l,h,E),c=this.histo[f]||0,t+=c,s+=c*(l+.5)*n,o+=c*(h+.5)*n,p+=c*(E+.5)*n;return t?this._avg=[~~(s/t),~~(o/t),~~(p/t)]:this._avg=[~~(n*(this.r1+this.r2+1)/2),~~(n*(this.g1+this.g2+1)/2),~~(n*(this.b1+this.b2+1)/2)],this._avg});m(this,"contains",e=>{let[t,n,s]=e.map(o=>o>>G);return t>=this.r1&&t<=this.r2&&n>=this.g1&&n<=this.g2&&s>=this.b1&&s<=this.b2})}};var _=5,G=8-_,Q=1e3,$e=.75,R={naturalOrder:(r,e)=>r<e?-1:r>e?1:0,sum:(r,e)=>r.reduce((t,n)=>t+(e?e.call(r,n):Number(n)),0),max:(r,e)=>Math.max.apply(null,e?r.map(e):r.map(t=>Number(t))),size:r=>r.reduce((e,t)=>t?e+1:e,0)},x=(r,e,t)=>(r<<2*_)+(e<<_)+t;var we=r=>{let e=new Array(1<<3*_),t,n=1/0,s=0,o=1/0,p=0,c=1/0,l=0,h,E,f;return r.forEach(function(I){[h,E,f]=I.map(L=>L>>G),t=x(h,E,f),e[t]=(e[t]||0)+1,h<n?n=h:h>s&&(s=h),E<o?o=E:E>p&&(p=E),f<c?c=f:f>l&&(l=f)}),{vbox:new $(n,s,o,p,c,l,e),histo:e}},Pe=(r,e)=>{if(!e.count())return[];if(e.count()===1)return[e.copy()];let t=e.r2-e.r1+1,n=e.g2-e.g1+1,s=e.b2-e.b1+1,o=R.max([t,n,s]),p=[],c=0,l,h,E,f,I;if(o===t)for(l=e.r1;l<=e.r2;l++){for(f=0,h=e.g1;h<=e.g2;h++)for(E=e.b1;E<=e.b2;E++)I=x(l,h,E),f+=r[I]||0;c+=f,p[l]=c}else if(o===n)for(l=e.g1;l<=e.g2;l++){for(f=0,h=e.r1;h<=e.r2;h++)for(E=e.b1;E<=e.b2;E++)I=x(h,l,E),f+=r[I]||0;c+=f,p[l]=c}else for(l=e.b1;l<=e.b2;l++){for(f=0,h=e.r1;h<=e.r2;h++)for(E=e.g1;E<=e.g2;E++)I=x(h,E,l),f+=r[I]||0;c+=f,p[l]=c}let L=te=>{let M=`${te}1`,P=`${te}2`,B,U,X,V,A;for(l=e[M];l<=e[P]&&!(p[l]>=c/2);l++);for(X=e.copy(),V=e.copy(),B=l-e[M],U=e[P]-l,A=B<=U?Math.min(e[P]-1,~~(l+U/2)):Math.max(e[M],~~(l-1-B/2));!p[A]&&A<=e[P];)A++;return X[P]=A,V[M]=A+1,[X,V]};return L(o===t?"r":o===n?"g":"b")};var k=class{constructor(){m(this,"vboxes");m(this,"push",e=>{this.vboxes.push({vbox:e,color:e.avg()})});m(this,"palette",()=>this.vboxes.map(e=>e.color));m(this,"size",()=>this.vboxes.size());m(this,"map",e=>{for(let t=0;t<this.vboxes.size();t++)if(this.vboxes.peek(t).vbox.contains(e))return this.vboxes.peek(t).color;return this.nearest(e)});m(this,"nearest",e=>{let t,n,s,o;for(t=0;t<this.vboxes.size();t++)s=Math.sqrt(Math.pow(e[0]-this.vboxes.peek(t).color[0],2)+Math.pow(e[1]-this.vboxes.peek(t).color[1],2)+Math.pow(e[2]-this.vboxes.peek(t).color[2],2)),(n===void 0||s<n)&&(n=s,o=this.vboxes.peek(t).color);return o});m(this,"forcebw",()=>{this.vboxes.sort((s,o)=>R.naturalOrder(R.sum(s.color),R.sum(o.color)));let e=this.vboxes[0].color;e[0]<5&&e[1]<5&&e[2]<5&&(this.vboxes[0].color=[0,0,0]);let t=this.vboxes.length-1,n=this.vboxes[t].color;n[0]>251&&n[1]>251&&n[2]>251&&(this.vboxes[t].color=[255,255,255]),this.vboxes.sort(k._compare)});this.vboxes=new C(k._compare)}},w=k;m(w,"_compare",(e,t)=>R.naturalOrder(e.vbox.count()*e.vbox.volume(),t.vbox.count()*t.vbox.volume()));var ve=(r,e)=>{if(!r.length||e<1||e>256)return new w;let{histo:t,vbox:n}=we(r),s=new C((c,l)=>R.naturalOrder(c.count(),l.count()));s.push(n);let o=(c,l)=>{let h=c.size(),E=0,f;for(;E<Q;){if(h>=l||E++>Q||!c.peek().count())return;f=c.pop();let[I,L]=Pe(t,f);if(!I)return;c.push(I),L&&(c.push(L),h++)}};o(s,$e*e),s.sort((c,l)=>R.naturalOrder(c.count()*c.volume(),l.count()*l.volume())),o(s,e);let p=new w;for(;s.size();)p.push(s.pop());return p};var Me;var Y={},ct=new Map;function ee(r,e,t=[]){Y[r]={funcName:r,funcBody:e};let n=0;return(...s)=>{if(Me)return new Promise((o,p)=>{let c=`${Ne(4)} - ${r} - ${n++}`;ct.set(c,[o,p]),Me.postMessage({id:c,funcName:r,args:s},t.map(l=>s[l]).filter(l=>!!l))});APP_CONF.isOSX||D("AMLL Worker 尚未运行，正在本地线程执行函数",r,s);try{let o=e(...s);return Promise.resolve(o)}catch(o){return Promise.reject(o)}}}var er=ee("grabImageColors",(r,e=16)=>{let t,n;if(d||!APP_CONF.isOSX?(t=new OffscreenCanvas(r.width,r.height),n=t.getContext("2d")):(t=document.createElement("canvas"),t.width=r.width,t.height=r.height,n=t.getContext("2d")),n){n.drawImage(r,0,0);let s=n.getImageData(0,0,t.width,t.height),o=[];for(let l=0;l<s.width*s.height;l++)o.push([s.data[l*4],s.data[l*4+1],s.data[l*4+2]]);let p=ve(o,e),c=[];return p.palette().forEach(l=>c.push(l)),c}else return[]}),tr=ee("calcImageAverageColor",r=>{let e,t;if(d||!APP_CONF.isOSX?(e=new OffscreenCanvas(r.width,r.height),t=e.getContext("2d")):(e=document.createElement("canvas"),e.width=r.width,e.height=r.height,t=e.getContext("2d")),t){t.drawImage(r,0,0);let n=t.getImageData(0,0,e.width,e.height),s=[0,0,0];for(let o=0;o<n.width*n.height;o++)s[0]+=n.data[o*4],s[1]+=n.data[o*4+1],s[2]+=n.data[o*4+2];return s[0]/=n.width*n.height,s[1]/=n.width*n.height,s[2]/=n.width*n.height,s}else return[0,0,0]}),Ce=ee("setConfigFromMain",r=>{if(d){for(let e in r)Te(e,r[e]);N("已从主线程同步配置",...Object.keys(r))}});onmessage=async r=>{try{N("正在执行后台任务",r.data.id,r.data.funcName,r.data.args);let t=await Y[r.data.funcName].funcBody(...r.data.args);postMessage({id:r.data.id,result:t})}catch(e){xe("后台任务发生错误",r.data.id,r.data.funcName,r.data.args,e),postMessage({id:r.data.id,result:void 0,error:e})}};N("AMLL 后台线程正在运行！");})();
//# sourceMappingURL=data:application/json;base64,
