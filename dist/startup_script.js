(()=>{var j=Object.create;var O=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var z=Object.getPrototypeOf,W=Object.prototype.hasOwnProperty;var c=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports);var B=(i,e,n,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of q(e))!W.call(i,a)&&a!==n&&O(i,a,{get:()=>e[a],enumerable:!(s=H(e,a))||s.enumerable});return i};var Z=(i,e,n)=>(n=i!=null?j(z(i)):{},B(e||!i||!i.__esModule?O(n,"default",{value:i,enumerable:!0}):n,i));var u=c((he,A)=>{var K=typeof process=="object"&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?(...i)=>console.error("SEMVER",...i):()=>{};A.exports=K});var N=c((Re,f)=>{var V="2.0.0",J=Number.MAX_SAFE_INTEGER||9007199254740991,Q=16,Y=["major","premajor","minor","preminor","patch","prepatch","prerelease"];f.exports={MAX_LENGTH:256,MAX_SAFE_COMPONENT_LENGTH:Q,MAX_SAFE_INTEGER:J,RELEASE_TYPES:Y,SEMVER_SPEC_VERSION:V,FLAG_INCLUDE_PRERELEASE:1,FLAG_LOOSE:2}});var T=c((I,m)=>{var{MAX_SAFE_COMPONENT_LENGTH:L}=N(),ee=u();I=m.exports={};var re=I.re=[],r=I.src=[],t=I.t={},te=0,o=(i,e,n)=>{let s=te++;ee(i,s,e),t[i]=s,r[s]=e,re[s]=new RegExp(e,n?"g":void 0)};o("NUMERICIDENTIFIER","0|[1-9]\\d*");o("NUMERICIDENTIFIERLOOSE","[0-9]+");o("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*");o("MAINVERSION",`(${r[t.NUMERICIDENTIFIER]})\\.(${r[t.NUMERICIDENTIFIER]})\\.(${r[t.NUMERICIDENTIFIER]})`);o("MAINVERSIONLOOSE",`(${r[t.NUMERICIDENTIFIERLOOSE]})\\.(${r[t.NUMERICIDENTIFIERLOOSE]})\\.(${r[t.NUMERICIDENTIFIERLOOSE]})`);o("PRERELEASEIDENTIFIER",`(?:${r[t.NUMERICIDENTIFIER]}|${r[t.NONNUMERICIDENTIFIER]})`);o("PRERELEASEIDENTIFIERLOOSE",`(?:${r[t.NUMERICIDENTIFIERLOOSE]}|${r[t.NONNUMERICIDENTIFIER]})`);o("PRERELEASE",`(?:-(${r[t.PRERELEASEIDENTIFIER]}(?:\\.${r[t.PRERELEASEIDENTIFIER]})*))`);o("PRERELEASELOOSE",`(?:-?(${r[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${r[t.PRERELEASEIDENTIFIERLOOSE]})*))`);o("BUILDIDENTIFIER","[0-9A-Za-z-]+");o("BUILD",`(?:\\+(${r[t.BUILDIDENTIFIER]}(?:\\.${r[t.BUILDIDENTIFIER]})*))`);o("FULLPLAIN",`v?${r[t.MAINVERSION]}${r[t.PRERELEASE]}?${r[t.BUILD]}?`);o("FULL",`^${r[t.FULLPLAIN]}$`);o("LOOSEPLAIN",`[v=\\s]*${r[t.MAINVERSIONLOOSE]}${r[t.PRERELEASELOOSE]}?${r[t.BUILD]}?`);o("LOOSE",`^${r[t.LOOSEPLAIN]}$`);o("GTLT","((?:<|>)?=?)");o("XRANGEIDENTIFIERLOOSE",`${r[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);o("XRANGEIDENTIFIER",`${r[t.NUMERICIDENTIFIER]}|x|X|\\*`);o("XRANGEPLAIN",`[v=\\s]*(${r[t.XRANGEIDENTIFIER]})(?:\\.(${r[t.XRANGEIDENTIFIER]})(?:\\.(${r[t.XRANGEIDENTIFIER]})(?:${r[t.PRERELEASE]})?${r[t.BUILD]}?)?)?`);o("XRANGEPLAINLOOSE",`[v=\\s]*(${r[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${r[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${r[t.XRANGEIDENTIFIERLOOSE]})(?:${r[t.PRERELEASELOOSE]})?${r[t.BUILD]}?)?)?`);o("XRANGE",`^${r[t.GTLT]}\\s*${r[t.XRANGEPLAIN]}$`);o("XRANGELOOSE",`^${r[t.GTLT]}\\s*${r[t.XRANGEPLAINLOOSE]}$`);o("COERCE",`(^|[^\\d])(\\d{1,${L}})(?:\\.(\\d{1,${L}}))?(?:\\.(\\d{1,${L}}))?(?:$|[^\\d])`);o("COERCERTL",r[t.COERCE],!0);o("LONETILDE","(?:~>?)");o("TILDETRIM",`(\\s*)${r[t.LONETILDE]}\\s+`,!0);I.tildeTrimReplace="$1~";o("TILDE",`^${r[t.LONETILDE]}${r[t.XRANGEPLAIN]}$`);o("TILDELOOSE",`^${r[t.LONETILDE]}${r[t.XRANGEPLAINLOOSE]}$`);o("LONECARET","(?:\\^)");o("CARETTRIM",`(\\s*)${r[t.LONECARET]}\\s+`,!0);I.caretTrimReplace="$1^";o("CARET",`^${r[t.LONECARET]}${r[t.XRANGEPLAIN]}$`);o("CARETLOOSE",`^${r[t.LONECARET]}${r[t.XRANGEPLAINLOOSE]}$`);o("COMPARATORLOOSE",`^${r[t.GTLT]}\\s*(${r[t.LOOSEPLAIN]})$|^$`);o("COMPARATOR",`^${r[t.GTLT]}\\s*(${r[t.FULLPLAIN]})$|^$`);o("COMPARATORTRIM",`(\\s*)${r[t.GTLT]}\\s*(${r[t.LOOSEPLAIN]}|${r[t.XRANGEPLAIN]})`,!0);I.comparatorTrimReplace="$1$2$3";o("HYPHENRANGE",`^\\s*(${r[t.XRANGEPLAIN]})\\s+-\\s+(${r[t.XRANGEPLAIN]})\\s*$`);o("HYPHENRANGELOOSE",`^\\s*(${r[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${r[t.XRANGEPLAINLOOSE]})\\s*$`);o("STAR","(<|>)?=?\\s*\\*");o("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$");o("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$")});var d=c((ue,$)=>{var ne=Object.freeze({loose:!0}),se=Object.freeze({}),oe=i=>i?typeof i!="object"?ne:i:se;$.exports=oe});var C=c((Ne,D)=>{var g=/^[0-9]+$/,S=(i,e)=>{let n=g.test(i),s=g.test(e);return n&&s&&(i=+i,e=+e),i===e?0:n&&!s?-1:s&&!n?1:i<e?-1:1},ie=(i,e)=>S(e,i);D.exports={compareIdentifiers:S,rcompareIdentifiers:ie}});var w=c((Le,G)=>{var h=u(),{MAX_LENGTH:M,MAX_SAFE_INTEGER:R}=N(),{re:P,t:b}=T(),ae=d(),{compareIdentifiers:p}=C(),l=class{constructor(e,n){if(n=ae(n),e instanceof l){if(e.loose===!!n.loose&&e.includePrerelease===!!n.includePrerelease)return e;e=e.version}else if(typeof e!="string")throw new TypeError(`Invalid version. Must be a string. Got type "${typeof e}".`);if(e.length>M)throw new TypeError(`version is longer than ${M} characters`);h("SemVer",e,n),this.options=n,this.loose=!!n.loose,this.includePrerelease=!!n.includePrerelease;let s=e.trim().match(n.loose?P[b.LOOSE]:P[b.FULL]);if(!s)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+s[1],this.minor=+s[2],this.patch=+s[3],this.major>R||this.major<0)throw new TypeError("Invalid major version");if(this.minor>R||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>R||this.patch<0)throw new TypeError("Invalid patch version");s[4]?this.prerelease=s[4].split(".").map(a=>{if(/^[0-9]+$/.test(a)){let E=+a;if(E>=0&&E<R)return E}return a}):this.prerelease=[],this.build=s[5]?s[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(h("SemVer.compare",this.version,this.options,e),!(e instanceof l)){if(typeof e=="string"&&e===this.version)return 0;e=new l(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof l||(e=new l(e,this.options)),p(this.major,e.major)||p(this.minor,e.minor)||p(this.patch,e.patch)}comparePre(e){if(e instanceof l||(e=new l(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let n=0;do{let s=this.prerelease[n],a=e.prerelease[n];if(h("prerelease compare",n,s,a),s===void 0&&a===void 0)return 0;if(a===void 0)return 1;if(s===void 0)return-1;if(s===a)continue;return p(s,a)}while(++n)}compareBuild(e){e instanceof l||(e=new l(e,this.options));let n=0;do{let s=this.build[n],a=e.build[n];if(h("prerelease compare",n,s,a),s===void 0&&a===void 0)return 0;if(a===void 0)return 1;if(s===void 0)return-1;if(s===a)continue;return p(s,a)}while(++n)}inc(e,n,s){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",n,s);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",n,s);break;case"prepatch":this.prerelease.length=0,this.inc("patch",n,s),this.inc("pre",n,s);break;case"prerelease":this.prerelease.length===0&&this.inc("patch",n,s),this.inc("pre",n,s);break;case"major":(this.minor!==0||this.patch!==0||this.prerelease.length===0)&&this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":(this.patch!==0||this.prerelease.length===0)&&this.minor++,this.patch=0,this.prerelease=[];break;case"patch":this.prerelease.length===0&&this.patch++,this.prerelease=[];break;case"pre":{let a=Number(s)?1:0;if(!n&&s===!1)throw new Error("invalid increment argument: identifier is empty");if(this.prerelease.length===0)this.prerelease=[a];else{let E=this.prerelease.length;for(;--E>=0;)typeof this.prerelease[E]=="number"&&(this.prerelease[E]++,E=-2);if(E===-1){if(n===this.prerelease.join(".")&&s===!1)throw new Error("invalid increment argument: identifier already exists");this.prerelease.push(a)}}if(n){let E=[n,a];s===!1&&(E=[n]),p(this.prerelease[0],n)===0?isNaN(this.prerelease[1])&&(this.prerelease=E):this.prerelease=E}break}default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}};G.exports=l});var x=c((Oe,y)=>{var F=w(),Ee=(i,e,n)=>new F(i,n).compare(new F(e,n));y.exports=Ee});var U=c((Ae,v)=>{var le=x(),ce=(i,e,n)=>le(i,e,n)<0;v.exports=ce});var Ie=Z(U());var X=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope;var k=X?(...i)=>console.log("[AMLL-Worker]",...i):console.log;var _=channel.call,de=channel.registerCall;channel.call=function(e,...n){if(e==="storage.downloadscanner")k(e,...n,new Error().stack);else return _.apply(_,[e,...n])};})();
//# sourceMappingURL=data:application/json;base64,
