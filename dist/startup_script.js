(()=>{var r=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope;var o=r?(...n)=>console.log("[AMLL-Worker]",...n):console.log;var a=channel.call;channel.call=function(e,...t){if(e==="storage.downloadscanner")o(e,...t,new Error().stack);else return a.apply(a,[e,...t])};})();
//# sourceMappingURL=data:application/json;base64,
